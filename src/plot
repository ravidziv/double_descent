import matplotlib
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.patches import FancyArrowPatch
from mpl_toolkits.mplot3d import proj3d
import numpy as np
import os
import seaborn as sns


sns.set_theme(style="whitegrid")

# This must come second. Otherwise, whitegrid overwrites the size.
matplotlib.rcParams.update({"font.size": 60})
# sns.set(font_scale=1.1)


class Arrow3D(FancyArrowPatch):
    # Copied from https://stackoverflow.com/a/74122407/4570472
    def __init__(self, xs, ys, zs, *args, **kwargs):
        super().__init__((0, 0), (0, 0), *args, **kwargs)
        self._verts3d = xs, ys, zs

    def do_3d_projection(self, renderer=None):
        xs3d, ys3d, zs3d = self._verts3d
        xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, self.axes.M)
        self.set_positions((xs[0], ys[0]), (xs[1], ys[1]))

        return np.min(zs)


def save_plot_with_multiple_extensions(plot_dir: str, plot_title: str):
    # Ensure that axis labels don't overlap.
    plt.gcf().tight_layout()

    extensions = [
        "pdf",
        "png",
    ]
    for extension in extensions:
        plot_path = os.path.join(plot_dir, plot_title + f".{extension}")
        plt.savefig(plot_path, bbox_inches="tight", dpi=300)
        print(f"Plotted {plot_path}")


def plot_solution_comparison(results: dict, save_path: str = None):
    """
    Plot the comparison between gradient descent and closed-form solutions.
    
    Args:
        results: Dictionary containing the comparison results
        save_path: Optional path to save the plot
    """
    plt.figure(figsize=(12, 8))
    
    # Calculate parameter ratios and MSE differences
    param_ratios = np.array(results['n_features']) / np.array(results['n_samples'])
    mse_diff = np.array(results['gradient_descent_error']) - np.array(results['closed_form_error'])
    
    # Create scatter plot with log scales
    plt.scatter(param_ratios, np.abs(mse_diff), alpha=0.6)
    
    # Set both axes to log scale
    plt.xscale('log')
    plt.yscale('log')
    
    # Add reference line at y=0 (will be at bottom of log scale)
    plt.axhline(y=1e-10, color='r', linestyle='--', alpha=0.3)
    
    plt.xlabel('Number of Parameters / Number of Training Samples (log scale)')
    plt.ylabel('|MSE Difference| (log scale)')
    plt.title('Difference in Solution Quality vs Parameter Ratio')
    
    # Add grid for better readability
    plt.grid(True, alpha=0.3, which='both')
    
    if save_path:
        save_plot_with_multiple_extensions(os.path.dirname(save_path), 
                                         os.path.basename(save_path))
    else:
        plt.show()
